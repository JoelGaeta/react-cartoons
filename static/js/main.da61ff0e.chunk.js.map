{"version":3,"sources":["components/Footer.js","components/Header.js","components/Hover.js","components/ToolTip.js","components/Card.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Header","Hover","state","hovering","mouseOver","_this","setState","mouseOut","onMouseOver","this","onMouseOut","props","children","React","Component","styles","container","position","display","tooltip","boxSizing","width","bottom","left","marginLeft","backgroundColor","padding","marginBottom","color","textAlign","fontSize","fontFamily","borderRadius","ToolTip","_ref","text","Hover_Hover","style","Card","src","image","alt","onClick","checkIfClicked","id","name","Container","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","score","bind","assertThisInitialized","clickedCard","filter","card","cardsCopy","slice","sort","b","Math","random","clicked","resetCardsCopy","map","findIndex","_this2","components_Header","components_Container","components_Card","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da61ff0e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return <div className=\"footer\" />;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>React Memory Game</h1>\r\n      <div className=\"directions\">\r\n        <h3>Try not to click the same charecter twice!</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default class Hover extends React.Component {\r\n  state = {\r\n    hovering: false\r\n  };\r\n  mouseOver = () => {\r\n    this.setState({\r\n      hovering: true\r\n    });\r\n  };\r\n\r\n  mouseOut = () => {\r\n    this.setState({\r\n      hovering: false\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>\r\n        {this.props.children(this.state.hovering)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Hover from \"./Hover\";\r\nconst styles = {\r\n  container: {\r\n    position: \"relative\",\r\n    display: \"flex\"\r\n  },\r\n  tooltip: {\r\n    boxSizing: \"border-box\",\r\n    position: \"absolute\",\r\n    width: \"160px\",\r\n    bottom: \"100%\",\r\n    left: \"50%\",\r\n    marginLeft: \"-80px\",\r\n    backgroundColor: \"hsla(0,0%,20%,0.9)\",\r\n    padding: \"7px\",\r\n    marginBottom: \"5px\",\r\n    color: \"#fff\",\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    fontFamily: \"Georgia\",\r\n    borderRadius: \"10px\"\r\n  }\r\n};\r\n\r\nexport default function ToolTip({ text, children }) {\r\n  return (\r\n    <Hover>\r\n      {hovering => (\r\n        <div style={styles.container}>\r\n          {hovering === true && <div style={styles.tooltip}>{text}</div>}\r\n          {children}\r\n        </div>\r\n      )}\r\n    </Hover>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card = props => (\r\n  <div className=\"imagelist\">\r\n    <img\r\n      src={props.image}\r\n      alt=\"90s cartoon charecters\"\r\n      onClick={() => props.checkIfClicked(props.id)}\r\n    />\r\n    <div className=\"overlay\">{props.name}</div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst Container = props => <div className=\"imgcontainer\">{props.children}</div>;\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport ToolTip from \"./components/ToolTip\";\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport cards from \"./cards.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: cards,\n      score: 0\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n\n  checkIfClicked(id) {\n    // create a copy of the cards and use a random method to sort the array\n    let clickedCard = this.state.cards.filter(card => card.id === id)[0];\n    let cardsCopy = this.state.cards.slice().sort(function(a, b) {\n      return 0.5 - Math.random();\n    });\n    // if a card has not been clicked, set its clicked state to true\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      cardsCopy[cardsCopy.findIndex(card => card.id === id)] = clickedCard;\n\n      // set the state and increment the counter\n      this.setState({\n        cards: cardsCopy,\n        score: this.state.score + 1\n      });\n    }\n\n    // if a card has been clicked already, then set its click to false and reset the game\n    else {\n      let resetCardsCopy = cardsCopy.map(card => {\n        return {\n          id: card.id,\n          image: card.image,\n          name: card.name,\n          clicked: false\n        };\n      });\n      this.setState({\n        cards: resetCardsCopy,\n        score: 0\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <ToolTip text={\"90's cartoons are awesome!\"}>\n          <Container>\n            {this.state.cards.map(card => (\n              <Card\n                className=\"imagelist\"\n                checkIfClicked={this.checkIfClicked}\n                id={card.id}\n                key={card.id}\n                image={card.image}\n                name={card.name}\n              />\n            ))}\n          </Container>\n        </ToolTip>\n        <div className=\"score-container\">\n          <h1 className=\"score\">Score:{this.state.score}</h1>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}